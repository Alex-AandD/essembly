#pragma once
#include "decl_types.hh"
#include <memory>
/* tasks of the analyzer: */
/*
    typechecking = use the TypeCheckerVisitor
    CFG          = control flow graph (to be implemented)
*/

namespace Essembly {

class Expr;
class TypeCheckerVisitor;

class Analyzer {
private:
    Expr* AST; /* AST generated by the Parser */
    std::unique_ptr<TypeCheckerVisitor> typeChecker; /* unique pointer because the analyzer owns */
                                                     /* the type checker*/
                                                     /* but it does not own the AST (raw pointer) */
public:
    Analyzer();
    Analyzer(Expr*);
    /* explicitly delete copy and move constructor and operators */
    Analyzer(const Analyzer&) = delete;
    Analyzer(Analyzer&&) = delete;
    Analyzer& operator=(const Analyzer&) = delete;
    Analyzer& operator=(Analyzer&&) = delete;
public:
    void analyze();
private:
    bool checkTypes();
};



} // ESSEMBLY
