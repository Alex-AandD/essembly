#pragma once
#include <vector>
#include <string>

/* the input of the generator is going to be the AST */
/*  then on the AST we call the visitor, which is going to create an
    unoptimized form of bytecode. The instruction generated by the visitor
    is going to go in the stream vector;
    Then we start optimizing the stream vector
*/

class Instruction;
class BytecodeVisitor;
class DisassembleVisitor;
class Expr;

class Generator {
    /* the input is going to be the AST generated by the parser */
    /* then we use the visitor on this AST */
    Expr* AST;
    BytecodeVisitor* bytecodeVisitor;
    DisassembleVisitor* disassembleVisitor;
    std::vector<Instruction*> instructions;
public:
    Generator(Expr* AST);
    ~Generator();
public:
    /* here we will call the visit method for every statement */
    void generateBytecode();
    [[nodiscard]] inline std::vector<Instruction*> getInstructions() const noexcept  { return instructions; }
    void disassemble() const noexcept;
};